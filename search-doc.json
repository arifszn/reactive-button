[{"title":"Installation","type":0,"sectionRef":"#","url":"docs/installation","content":"","keywords":""},{"title":"Requirements","type":1,"pageTitle":"Installation","url":"docs/installation#requirements","content":"React version >= 16.8 or above "},{"title":"Installation","type":1,"pageTitle":"Installation","url":"docs/installation#installation","content":"Install via NPM Copy npm install --save reactive-button Install via Yarn Copy yarn add reactive-button Now you are good to go. "},{"title":"Reactive Button","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"Example","type":1,"pageTitle":"Reactive Button","url":"docs/#example","content":"Primary Green Red Dark Light Teal Blue Violet Orange Yellow Primary Green Red Dark Light Loading Loading Loading Loading Loading "},{"title":"Features","type":1,"pageTitle":"Reactive Button","url":"docs/#features","content":"ReactiveAnimatedLightweight <20KBSupports iconsZero dependency Super easy to setupSuper easy to customizeAnd much more ! "},{"title":"Support","type":1,"pageTitle":"Reactive Button","url":"docs/#support","content":"Show your ❤️ and support by giving a ⭐ on Github. "},{"title":"License","type":1,"pageTitle":"Reactive Button","url":"docs/#license","content":"MIT Licensed. Copyright © MD. Ariful Alam 2020. "},{"title":"Theming","type":0,"sectionRef":"#","url":"docs/theming","content":"","keywords":""},{"title":"Custom Theme","type":1,"pageTitle":"Theming","url":"docs/theming#custom-theme","content":"Modify the values how you prefer and use it in your existing css file. Copy .reactive-btn-wrapper, .reactive-btn{ --reactive-button-min-width:100px!important; --reactive-button-min-height:35px!important; --reactive-button-font-size:14px!important; --reactive-button-font-weight:400!important; --reactive-button-border-radius:0px!important; --reactive-button-text-color:#FFFFFF!important; --reactive-progress-color:rgba(0,0,0,.15)!important; --reactive-button-primary-color:rgba(88,103,221,1)!important; --reactive-button-dark-color:rgba(66,78,106,1)!important; --reactive-button-light-color:rgba(183,186,191,1)!important; --reactive-button-green-color:rgba(37,162,51,1)!important; --reactive-button-red-color:rgba(244,81,108,1)!important; --reactive-button-yellow-color:rgba(255,193,7,1)!important; --reactive-button-teal-color:rgba(0,181,173,1)!important; --reactive-button-violet-color:rgba(100,53,201,1)!important; --reactive-button-orange-color:rgba(231,107,0,1)!important; --reactive-button-blue-color:rgba(66,153,225,1)!important; --reactive-progress-outline-primary-color:rgba(88,103,221,.3)!important; --reactive-progress-outline-dark-color:rgba(66,78,106,.3)!important; --reactive-progress-outline-light-color:rgba(214,212,212,.3)!important; --reactive-progress-outline-green-color:rgba(37,162,51,.3)!important; --reactive-progress-outline-red-color:rgba(244,81,108,.3)!important; --reactive-progress-outline-yellow-color:rgba(255,193,7,.3)!important; --reactive-progress-outline-teal-color:rgba(0,181,173,.3)!important; --reactive-progress-outline-violet-color:rgba(100,53,201,.3)!important; --reactive-progress-outline-orange-color:rgba(231,107,0,.3)!important; --reactive-progress-outline-blue-color:rgba(66,153,225,.3)!important; } "},{"title":"Playground","type":0,"sectionRef":"#","url":"docs/playground","content":"","keywords":""},{"title":"Interactive Playground","type":1,"pageTitle":"Playground","url":"docs/playground#interactive-playground","content":"Toggle or change the props to see changes. Click Me buttonState idleloadingsuccesserror idleText successText shadow outline animation className size tinysmallnormallarge messageDuration color primarydarklightgreenredyellowtealvioletorangeblue loadingText errorText rounded block disabled width px height px Reset All "},{"title":"Editor Playground","type":1,"pageTitle":"Playground","url":"docs/playground#editor-playground","content":"Edit code to see changes. Click Me function App() { const [state, setState] = useState('idle'); const onClickHandler = () => { setState('loading'); setTimeout(() => { setState('success'); }, 2000); } return ( <ReactiveButton buttonState={state} onClick={onClickHandler} color={'primary'} idleText={'Click Me'} loadingText={<React.Fragment><span><FontAwesomeIcon icon={faCircleNotch} spin/></span> Loading</React.Fragment>} successText={<React.Fragment><span><FontAwesomeIcon icon={faThumbsUp}/></span> Success</React.Fragment>} errorText={<React.Fragment><span><FontAwesomeIcon icon={faBomb}/></span> Error</React.Fragment>} type={'button'} className={'class1 class2'} style={{ borderRadius: '5px' }} outline={false} shadow={false} rounded={false} size={'normal'} block={false} messageDuration={2000} disabled={false} buttonRef={null} width={null} height={null} animation={true} /> ); } function App() { const [state, setState] = useState('idle'); const onClickHandler = () => { setState('loading'); setTimeout(() => { setState('success'); }, 2000); } return ( <ReactiveButton buttonState={state} onClick={onClickHandler} color={'primary'} idleText={'Click Me'} loadingText={<React.Fragment><span><FontAwesomeIcon icon={faCircleNotch} spin/></span> Loading</React.Fragment>} successText={<React.Fragment><span><FontAwesomeIcon icon={faThumbsUp}/></span> Success</React.Fragment>} errorText={<React.Fragment><span><FontAwesomeIcon icon={faBomb}/></span> Error</React.Fragment>} type={'button'} className={'class1 class2'} style={{ borderRadius: '5px' }} outline={false} shadow={false} rounded={false} size={'normal'} block={false} messageDuration={2000} disabled={false} buttonRef={null} width={null} height={null} animation={true} /> ); }  "},{"title":"Usage","type":0,"sectionRef":"#","url":"docs/usage","content":"","keywords":""},{"title":"Basic Usage","type":1,"pageTitle":"Usage","url":"docs/usage#basic-usage","content":"Copy import React,{ useState }from'react'; import ReactiveButton from'reactive-button'; functionApp(){ const[state, setState]=useState('idle'); constonClickHandler=()=>{ setState('loading'); setTimeout(()=>{ setState('success'); },2000); } return( <ReactiveButton buttonState={state} onClick={onClickHandler} /> ); } exportdefault App; "},{"title":"Full Usage","type":1,"pageTitle":"Usage","url":"docs/usage#full-usage","content":"Copy import React,{ useState }from'react'; import ReactiveButton from'reactive-button'; functionApp(){ const[state, setState]=useState('idle'); constonClickHandler=()=>{ setState('loading'); setTimeout(()=>{ setState('success'); },2000); } return( <ReactiveButton buttonState={state} onClick={onClickHandler} color={'primary'} idleText={'Button'} loadingText={'Loading'} successText={'Success'} errorText={'Error'} type={'button'} className={'class1 class2'} style={{ borderRadius:'5px'}} outline={false} shadow={false} rounded={false} size={'normal'} block={false} messageDuration={2000} disabled={false} buttonRef={null} width={null} height={null} animation={true} /> ); } exportdefault App; note For non asynchronous task, state management is not needed. Use as like normal button. "},{"title":"Other Usage","type":1,"pageTitle":"Usage","url":"docs/usage#other-usage","content":"Reactive Button has all the functionalities of a normal button. "},{"title":"Color","type":1,"pageTitle":"Usage","url":"docs/usage#color","content":"Reactive Button comes with 10 default color options. Primary Green Red Dark Light Teal Blue Violet Orange Yellow Copy <ReactiveButtoncolor=\"primary\"/> <ReactiveButtoncolor=\"red\"/> <ReactiveButtoncolor=\"dark\"/> <ReactiveButtoncolor=\"light\"/> <ReactiveButtoncolor=\"teal\"/> <ReactiveButtoncolor=\"blue\"/> <ReactiveButtoncolor=\"violet\"/> <ReactiveButtoncolor=\"orange\"/> <ReactiveButtoncolor=\"yellow\"/> "},{"title":"Size","type":1,"pageTitle":"Usage","url":"docs/usage#size","content":"There are 4 sizes available. Tiny small Medium large Copy <ReactiveButtonsize=\"tiny\"/> <ReactiveButtonsize=\"small\"/> <ReactiveButtonsize=\"medium\"/> <ReactiveButtonsize=\"large\"/> "},{"title":"Style","type":1,"pageTitle":"Usage","url":"docs/usage#style","content":"Make the buttons more beautiful with these customization options. Outline Rounded Shadow Copy <ReactiveButtonoutline/> <ReactiveButtonrounded/> <ReactiveButtonshadow/> "},{"title":"Existing State","type":1,"pageTitle":"Usage","url":"docs/usage#existing-state","content":"In your project, There might be existing state for loading indicator which accepts boolean value only. If you don't want to define new state for Reactive Button, then utilize the existing state. Copy const[loading, setLoading]=useState(false); return( <ReactiveButton buttonState={loading ?'loading':'idle'} idleText={'Button'} loadingText={'Loading'} /> ); "},{"title":"Without State","type":1,"pageTitle":"Usage","url":"docs/usage#without-state","content":"You are not limited to use state always. Copy <ReactiveButton onClick={doSomething} idleText={\"Some Text\"} /> "},{"title":"Using Icons","type":1,"pageTitle":"Usage","url":"docs/usage#using-icons","content":"You can use your own icons. Don't forget to wrap them with a parent element.  Send Copy <ReactiveButton idleText={<span><FontAwesomeIconicon={faReply}/> Send</span>} /> "},{"title":"Form Submit","type":1,"pageTitle":"Usage","url":"docs/usage#form-submit","content":"If you need to submit form by button clicking, set the type prop as 'submit'. Copy <form> <inputtype=\"text\"name=\"username\"/> <inputtype=\"password\"name=\"password\"/> <ReactiveButton type={'submit'} idleText=\"Submit\" /> </form> "},{"title":"Anchor Tag","type":1,"pageTitle":"Usage","url":"docs/usage#anchor-tag","content":"To use Reactive button as anchor tag, simply wrap it with an anchor tag. Visit Github Copy <ahref=\"https://github.com/\"target=\"_blank\"> <ReactiveButton idleText=\"Visit Github\" /> </a> Note: For more usage, visit Playground . "},{"title":"Available Props","type":1,"pageTitle":"Usage","url":"docs/usage#available-props","content":"Props\tType\tDescription\tDefaultbuttonState\tstring\tCurrent button state\t'idle' onClick\tfunction\tCallback function when clicking button () => {} color\tstring\tButton color\t'primary' idleText\tstring | ReactNode\tButton text when idle\t'Click Me' loadingText\tstring | ReactNode\tButton text when loading\t'Loading' successText\tstring | ReactNode\tButton text when loading successful\t'Success' errorText\tstring | ReactNode\tButton text when loading failed\t'Error' type\tstring\tButton type attribute\t'button' className\tstring\tButton classnames\t'' style\tReact.CSSProperties\tCustom style\t{} outline\tboolean\tEnable outline effect\tfalse shadow\tboolean\tEnable shadow effect\tfalse rounded\tboolean\tEnable rounded button\tfalse size\tstring\tButton size\t'normal' block\tboolean\tBlock Button\tfalse messageDuration\tnumber\tSuccess/Error message duration in millisecond\t2000 disabled\tboolean\tDisable button\tfalse buttonRef\tReact.Ref | null\tButton reference\tnull width\tstring | null\tOverride button width\tnull height\tstring | null\tOverride button height\tnull animation\tboolean\tButton hover and click animation\ttrue "}]