(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{62:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return i})),n.d(e,"metadata",(function(){return r})),n.d(e,"rightToc",(function(){return o})),n.d(e,"default",(function(){return d}));var a=n(2),l=n(6),c=(n(0),n(80)),b=n(74),i={id:"usage",title:"Usage"},r={unversionedId:"usage",id:"usage",isDocsHomePage:!1,title:"Usage",description:"Below example demonstrates an asynchronous task. When clicking the button, an asynchronous task (e.g. Data fetch, form submit) will be processed and after processing, a success or error message will be displayed.",source:"@site/docs\\usage.md",slug:"/usage",permalink:"/reactive-button/docs/usage",version:"current",sidebar:"someSidebar",previous:{title:"Installation",permalink:"/reactive-button/docs/installation"},next:{title:"Playground",permalink:"/reactive-button/docs/playground"}},o=[{value:"Basic Usage",id:"basic-usage",children:[]},{value:"Full Usage",id:"full-usage",children:[]},{value:"Other Usage",id:"other-usage",children:[{value:"Without State",id:"without-state",children:[]},{value:"Using Icon",id:"using-icon",children:[]},{value:"Form Submit",id:"form-submit",children:[]},{value:"Anchor Tag",id:"anchor-tag",children:[]}]},{value:"Available Props",id:"available-props",children:[]}],s={rightToc:o};function d(t){var e=t.components,n=Object(l.a)(t,["components"]);return Object(c.b)("wrapper",Object(a.a)({},s,n,{components:e,mdxType:"MDXLayout"}),Object(c.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(c.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(c.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(c.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"Below example demonstrates an asynchronous task. When clicking the button, an asynchronous task (e.g. Data fetch, form submit) will be processed and after processing, a success or error message will be displayed."))),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Initialize a state with string value ",Object(c.b)("code",null,"'idle'")," and assign it as ",Object(c.b)("strong",null,"'buttonState'")," prop. Now it will render an idle text."),Object(c.b)("li",{parentName:"ul"},"When the button is clicked, set state's value to ",Object(c.b)("code",null,"'loading'"),". "),Object(c.b)("li",{parentName:"ul"},"When the task is completed, set state to ",Object(c.b)("code",null,"'success'")," or ",Object(c.b)("code",null,"'error'")," according to your need.")),Object(c.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React, { useState } from 'react';\nimport ReactiveButton from 'reactive-button';\n\nfunction App() {\n   const [state, setState] = useState('idle');\n\n   const onClickHandler = () => {\n      setState('loading');\n      setTimeout(() => {\n         setState('success');\n      }, 2000);\n   }\n\n   return (\n      <ReactiveButton\n         buttonState={state}\n         onClick={onClickHandler}\n      />\n   );\n}\n\nexport default App;\n")),Object(c.b)("h2",{id:"full-usage"},"Full Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React, { useState } from 'react';\nimport ReactiveButton from 'reactive-button';\n\nfunction App() {\n   const [state, setState] = useState('idle');\n\n   const onClickHandler = () => {\n      setState('loading');\n      setTimeout(() => {\n      setState('success');\n      }, 2000);\n   }\n\n   return (\n      <ReactiveButton\n         buttonState={state}\n         onClick={onClickHandler}\n         color={'primary'}\n         idleText={'Button'}\n         loadingText={'Loading'}\n         successText={'Success'}\n         errorText={'Error'}\n         type={'button'}\n         className={'class1 class2'}\n         style={{ borderRadius: '5px' }}\n         outline={false}\n         shadow={false}\n         rounded={false}\n         size={'normal'}\n         block={false}\n         messageDuration={2000}\n         disabled={false}\n         buttonRef={null}\n         width={null}\n         height={null}\n         animation={true}\n    />\n  );\n}\n\nexport default App;\n")),Object(c.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(c.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(c.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(c.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"For non asynchronous task, state management is not needed. Use as like normal button."))),Object(c.b)("h2",{id:"other-usage"},"Other Usage"),Object(c.b)("span",{classNames:"tagLine"},"Reactive Button")," has all the functionalities of a normal button.",Object(c.b)("h3",{id:"without-state"},"Without State"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<ReactiveButton\n   onClick={doSomething}\n   idleText="Some Text"\n/>\n')),Object(c.b)("h3",{id:"using-icon"},"Using Icon"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<ReactiveButton\n   idleText={<span><i className="fa fa-reply"></i>Send</span>}\n/>\n')),Object(c.b)("h3",{id:"form-submit"},"Form Submit"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<form>\n   <input type="text" name="username"/>\n   <input type="password" name="password"/>\n   <ReactiveButton\n      type={\'submit\'}\n      idleText="Submit"\n   />\n</form>\n')),Object(c.b)("h3",{id:"anchor-tag"},"Anchor Tag"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'//wrap with anchor tag\n<a href="https://github.com/">\n   <ReactiveButton\n      idleText="Visit Github"\n   />\n</a>\n')),Object(c.b)("strong",null,"Note:")," For more usage, visit ",Object(c.b)(b.a,{to:"/docs/Playground#editor-playground",mdxType:"Link"},"Editor Playground")," and change the codes.",Object(c.b)("h2",{id:"available-props"},"Available Props"),Object(c.b)("div",{className:"z-table-wrapper"},Object(c.b)("table",null,Object(c.b)("thead",null,Object(c.b)("tr",null,Object(c.b)("th",{align:"left"},"Props"),Object(c.b)("th",{align:"center"},"Type"),Object(c.b)("th",{align:"left"},"Description"),Object(c.b)("th",{align:"center"},"Default"))),Object(c.b)("tbody",null,Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"buttonState"),Object(c.b)("td",{align:"center"},"string"),Object(c.b)("td",{align:"left"},"Current button state"),Object(c.b)("td",{align:"center"},"'idle'")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"onClick"),Object(c.b)("td",{align:"center"},"function"),Object(c.b)("td",{align:"left"},"Callback function when clicking button"),Object(c.b)("td",{align:"center"}," ","() => {}"," ")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"color"),Object(c.b)("td",{align:"center"},"string"),Object(c.b)("td",{align:"left"},"Button color"),Object(c.b)("td",{align:"center"},"'primary'")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"idleText"),Object(c.b)("td",{align:"center"},"string | ReactNode"),Object(c.b)("td",{align:"left"},"Button text when idle"),Object(c.b)("td",{align:"center"},"'Click Me'")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"loadingText"),Object(c.b)("td",{align:"center"},"string | ReactNode"),Object(c.b)("td",{align:"left"},"Button text when loading"),Object(c.b)("td",{align:"center"},"'Loading'")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"successText"),Object(c.b)("td",{align:"center"},"string | ReactNode"),Object(c.b)("td",{align:"left"},"Button text when loading successful"),Object(c.b)("td",{align:"center"},"'Success'")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"errorText"),Object(c.b)("td",{align:"center"},"string | ReactNode"),Object(c.b)("td",{align:"left"},"Button text when loading failed"),Object(c.b)("td",{align:"center"},"'Error'")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"type"),Object(c.b)("td",{align:"center"},"string"),Object(c.b)("td",{align:"left"},"Button type attribute"),Object(c.b)("td",{align:"center"},"'button'")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"className"),Object(c.b)("td",{align:"center"},"string"),Object(c.b)("td",{align:"left"},"Button classnames"),Object(c.b)("td",{align:"center"},"''")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"style"),Object(c.b)("td",{align:"center"},"React.CSSProperties"),Object(c.b)("td",{align:"left"},"Custom style"),Object(c.b)("td",{align:"center"},"{}")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"outline"),Object(c.b)("td",{align:"center"},"boolean"),Object(c.b)("td",{align:"left"},"Enable outline effect"),Object(c.b)("td",{align:"center"},"false")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"shadow"),Object(c.b)("td",{align:"center"},"boolean"),Object(c.b)("td",{align:"left"},"Enable shadow effect"),Object(c.b)("td",{align:"center"},"false")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"rounded"),Object(c.b)("td",{align:"center"},"boolean"),Object(c.b)("td",{align:"left"},"Enable rounded button"),Object(c.b)("td",{align:"center"},"false")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"size"),Object(c.b)("td",{align:"center"},"string"),Object(c.b)("td",{align:"left"},"Button size"),Object(c.b)("td",{align:"center"},"'normal'")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"block"),Object(c.b)("td",{align:"center"},"boolean"),Object(c.b)("td",{align:"left"},"Block Button"),Object(c.b)("td",{align:"center"},"false")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"messageDuration"),Object(c.b)("td",{align:"center"},"number"),Object(c.b)("td",{align:"left"},"Success/Error message duration in millisecond"),Object(c.b)("td",{align:"center"},"2000")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"disabled"),Object(c.b)("td",{align:"center"},"boolean"),Object(c.b)("td",{align:"left"},"Disable button"),Object(c.b)("td",{align:"center"},"false")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"buttonRef"),Object(c.b)("td",{align:"center"},"React.Ref | null"),Object(c.b)("td",{align:"left"},"Button reference"),Object(c.b)("td",{align:"center"},"null")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"width"),Object(c.b)("td",{align:"center"},"string | null"),Object(c.b)("td",{align:"left"},"Override button width"),Object(c.b)("td",{align:"center"},"null")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"height"),Object(c.b)("td",{align:"center"},"string | null"),Object(c.b)("td",{align:"left"},"Override button height"),Object(c.b)("td",{align:"center"},"null")),Object(c.b)("tr",null,Object(c.b)("td",{align:"left"},"animation"),Object(c.b)("td",{align:"center"},"boolean"),Object(c.b)("td",{align:"left"},"Button hover and click animation"),Object(c.b)("td",{align:"center"},"true"))))))}d.isMDXComponent=!0}}]);